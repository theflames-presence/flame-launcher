{"code":"(()=>{\n\"use strict\";var import_fs=require(\"fs\");var import_path=require(\"path\");if(!(0,import_fs.existsSync)((0,import_path.join)(__dirname,\"dist\"))){(0,import_fs.mkdirSync)((0,import_path.join)(__dirname,\"dist\"))}if(!(0,import_fs.existsSync)((0,import_path.join)(__dirname,\".env\"))){(0,import_fs.writeFileSync)((0,import_path.join)(__dirname,\".env\"),\"CURSEFORGE_API_KEY=\")}if(process.platform===\"win32\"){const appxManifestFilePath=\"./node_modules/app-builder-lib/templates/appx/appxmanifest.xml\";(0,import_fs.writeFileSync)(appxManifestFilePath,(0,import_fs.readFileSync)(appxManifestFilePath,\"utf-8\").replace(\"Publisher='${publisher}'\",'Publisher=\"${publisher}\"'),\"utf-8\")}if(process.platform===\"linux\"||process.platform===\"openbsd\"||process.platform===\"freebsd\"){const fpmTargetFilePath=\"./node_modules/app-builder-lib/out/targets/FpmTarget.js\";const linuxTargetHelperFilePath=\"./node_modules/app-builder-lib/out/targets/LinuxTargetHelper.js\";const linuxAfterInstallShPath=\"./node_modules/app-builder-lib/templates/linux/after-install.tpl\";(0,import_fs.writeFileSync)(fpmTargetFilePath,(0,import_fs.readFileSync)(fpmTargetFilePath,\"utf-8\").replace(\"installPrefix}/${appInfo.sanitizedProductName}\",\"installPrefix}/xmcl\"),\"utf-8\");(0,import_fs.writeFileSync)(linuxTargetHelperFilePath,(0,import_fs.readFileSync)(linuxTargetHelperFilePath,\"utf-8\").replace(\"installPrefix}/${appInfo.sanitizedProductName}\",\"installPrefix}/xmcl\"),\"utf-8\");(0,import_fs.writeFileSync)(linuxAfterInstallShPath,(0,import_fs.readFileSync)(linuxAfterInstallShPath,\"utf-8\").replaceAll(\"${sanitizedProductName}\",\"xmcl\"),\"utf-8\");console.log(\"Patched linux build target\")}\n})()\n","warnings":[],"map":{"version":3,"mappings":";aAAA,cAA0E,cAC1E,gBAAqB,gBAErB,GAAI,IAAC,yBAAW,kBAAK,UAAW,MAAM,CAAC,EAAG,IACxC,wBAAU,kBAAK,UAAW,MAAM,CAAC,CACnC,CAEA,GAAI,IAAC,yBAAW,kBAAK,UAAW,MAAM,CAAC,EAAG,IACxC,4BAAc,kBAAK,UAAW,MAAM,EAAG,qBAAqB,CAC9D,CAEA,GAAI,QAAQ,WAAa,QAAS,CAChC,MAAM,qBAAuB,oEAC7B,yBAAc,wBAAsB,wBAAa,qBAAsB,OAAO,EAE3E,QAAQ,2BAA4B,0BAA0B,EAAG,OAAO,CAC7E,CAEA,GAAI,QAAQ,WAAa,SAAW,QAAQ,WAAa,WAAa,QAAQ,WAAa,UAAW,CAEpG,MAAM,kBAAoB,0DAC1B,MAAM,0BAA4B,kEAClC,MAAM,wBAA0B,sEAChC,yBAAc,qBAAmB,wBAAa,kBAAmB,OAAO,EAErE,QAAQ,iDAAkD,qBAAqB,EAAG,OAAO,KAC5F,yBAAc,6BAA2B,wBAAa,0BAA2B,OAAO,EAErF,QAAQ,iDAAkD,qBAAqB,EAAG,OAAO,KAC5F,yBAAc,2BAAyB,wBAAa,wBAAyB,OAAO,EAEjF,WAAW,0BAA2B,MAAM,EAAG,OAAO,EACzD,QAAQ,IAAI,4BAA4B,CAC1C","names":[],"sources":["/run/media/drive2/Developing/flame-launcher/xmcl-electron-app/postinstall.ts"],"sourcesContent":["import { existsSync, mkdirSync, readFileSync, write, writeFileSync } from 'fs'\nimport { join } from 'path'\n\nif (!existsSync(join(__dirname, 'dist'))) {\n  mkdirSync(join(__dirname, 'dist'))\n}\n\nif (!existsSync(join(__dirname, '.env'))) {\n  writeFileSync(join(__dirname, '.env'), 'CURSEFORGE_API_KEY=')\n}\n\nif (process.platform === 'win32') {\n  const appxManifestFilePath = './node_modules/app-builder-lib/templates/appx/appxmanifest.xml'\n  writeFileSync(appxManifestFilePath, readFileSync(appxManifestFilePath, 'utf-8')\n    // eslint-disable-next-line no-template-curly-in-string\n    .replace(\"Publisher='${publisher}'\", 'Publisher=\"${publisher}\"'), 'utf-8')\n}\n\nif (process.platform === 'linux' || process.platform === 'openbsd' || process.platform === 'freebsd') {\n  // Overwrite the linux electron-builder js code\n  const fpmTargetFilePath = './node_modules/app-builder-lib/out/targets/FpmTarget.js'\n  const linuxTargetHelperFilePath = './node_modules/app-builder-lib/out/targets/LinuxTargetHelper.js'\n  const linuxAfterInstallShPath = './node_modules/app-builder-lib/templates/linux/after-install.tpl'\n  writeFileSync(fpmTargetFilePath, readFileSync(fpmTargetFilePath, 'utf-8')\n    // eslint-disable-next-line no-template-curly-in-string\n    .replace('installPrefix}/${appInfo.sanitizedProductName}', 'installPrefix}/xmcl'), 'utf-8')\n  writeFileSync(linuxTargetHelperFilePath, readFileSync(linuxTargetHelperFilePath, 'utf-8')\n    // eslint-disable-next-line no-template-curly-in-string\n    .replace('installPrefix}/${appInfo.sanitizedProductName}', 'installPrefix}/xmcl'), 'utf-8')\n  writeFileSync(linuxAfterInstallShPath, readFileSync(linuxAfterInstallShPath, 'utf-8')\n    // eslint-disable-next-line no-template-curly-in-string\n    .replaceAll('${sanitizedProductName}', 'xmcl'), 'utf-8')\n  console.log('Patched linux build target')\n}\n"]}}